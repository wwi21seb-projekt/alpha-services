name: Continuous Integration

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io

jobs:
  verify:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, post-service, user-service, mail-service]
    permissions:
      contents: read
      packages: write  # Grant write permissions to packages
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Filter changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            ${{ matrix.service }}:
              - 'src/${{ matrix.service }}/**'

      - name: Set up Go
        if: ${{ steps.filter.outputs[ matrix.service ] == 'true' }}
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.3'
          check-latest: true
          cache-dependency-path: "src/${{ matrix.service }}/go.sum"

      - name: Install Staticcheck
        if: ${{ steps.filter.outputs[ matrix.service ] == 'true' }}
        run: |
          cd src/${{ matrix.service }}
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Build project and verify dependencies
        if: ${{ steps.filter.outputs[ matrix.service ] == 'true' }}
        run: |
          cd src/${{ matrix.service }}
          go build -v ./... && go mod verify

      - name: Verify Code Quality
        if: ${{ steps.filter.outputs[ matrix.service ] == 'true' }}
        run: |
          cd src/${{ matrix.service }}
          go vet ./... && staticcheck ./...

      - name: Run Tests
        if: ${{ steps.filter.outputs[ matrix.service ] == 'true' }}
        run: |
          cd src/${{ matrix.service }}
          go test -v ./...

      - name: Login to GitHub Container Registry
        if: ${{ steps.filter.outputs[ matrix.service ] == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Docker metadata
        if: ${{ steps.filter.outputs[ matrix.service ] == 'true' }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository}}/${{ matrix.service }}
          tags: |
            ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || 'latest' }}
            ${{ github.event_name == 'pull_request' && format('pr-{0}-{1}', github.event.number, github.sha) || github.sha }}

      - name: Build and push Docker image
        if: ${{ steps.filter.outputs[ matrix.service ] == 'true' }}
        uses: docker/build-push-action@v5
        with:
          context: ./src/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ./src/${{ matrix.service }}/Dockerfile
