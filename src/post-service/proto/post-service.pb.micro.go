// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/post-service.proto

package serveralpha

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PostService service

func NewPostServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PostService service

type PostService interface {
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...client.CallOption) (*Post, error)
	QueryPosts(ctx context.Context, in *Empty, opts ...client.CallOption) (*QueryPostsResponse, error)
	DeletePost(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error)
	GetFeed(ctx context.Context, in *GetFeedRequest, opts ...client.CallOption) (*QueryPostsResponse, error)
}

type postService struct {
	c    client.Client
	name string
}

func NewPostService(name string, c client.Client) PostService {
	return &postService{
		c:    c,
		name: name,
	}
}

func (c *postService) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...client.CallOption) (*Post, error) {
	req := c.c.NewRequest(c.name, "PostService.CreatePost", in)
	out := new(Post)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) QueryPosts(ctx context.Context, in *Empty, opts ...client.CallOption) (*QueryPostsResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.QueryPosts", in)
	out := new(QueryPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) DeletePost(ctx context.Context, in *Empty, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "PostService.DeletePost", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postService) GetFeed(ctx context.Context, in *GetFeedRequest, opts ...client.CallOption) (*QueryPostsResponse, error) {
	req := c.c.NewRequest(c.name, "PostService.GetFeed", in)
	out := new(QueryPostsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostService service

type PostServiceHandler interface {
	CreatePost(context.Context, *CreatePostRequest, *Post) error
	QueryPosts(context.Context, *Empty, *QueryPostsResponse) error
	DeletePost(context.Context, *Empty, *Empty) error
	GetFeed(context.Context, *GetFeedRequest, *QueryPostsResponse) error
}

func RegisterPostServiceHandler(s server.Server, hdlr PostServiceHandler, opts ...server.HandlerOption) error {
	type postService interface {
		CreatePost(ctx context.Context, in *CreatePostRequest, out *Post) error
		QueryPosts(ctx context.Context, in *Empty, out *QueryPostsResponse) error
		DeletePost(ctx context.Context, in *Empty, out *Empty) error
		GetFeed(ctx context.Context, in *GetFeedRequest, out *QueryPostsResponse) error
	}
	type PostService struct {
		postService
	}
	h := &postServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PostService{h}, opts...))
}

type postServiceHandler struct {
	PostServiceHandler
}

func (h *postServiceHandler) CreatePost(ctx context.Context, in *CreatePostRequest, out *Post) error {
	return h.PostServiceHandler.CreatePost(ctx, in, out)
}

func (h *postServiceHandler) QueryPosts(ctx context.Context, in *Empty, out *QueryPostsResponse) error {
	return h.PostServiceHandler.QueryPosts(ctx, in, out)
}

func (h *postServiceHandler) DeletePost(ctx context.Context, in *Empty, out *Empty) error {
	return h.PostServiceHandler.DeletePost(ctx, in, out)
}

func (h *postServiceHandler) GetFeed(ctx context.Context, in *GetFeedRequest, out *QueryPostsResponse) error {
	return h.PostServiceHandler.GetFeed(ctx, in, out)
}

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	GetAuthor(ctx context.Context, in *GetAuthorRequest, opts ...client.CallOption) (*Author, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) GetAuthor(ctx context.Context, in *GetAuthorRequest, opts ...client.CallOption) (*Author, error) {
	req := c.c.NewRequest(c.name, "UserService.GetAuthor", in)
	out := new(Author)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	GetAuthor(context.Context, *GetAuthorRequest, *Author) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		GetAuthor(ctx context.Context, in *GetAuthorRequest, out *Author) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) GetAuthor(ctx context.Context, in *GetAuthorRequest, out *Author) error {
	return h.UserServiceHandler.GetAuthor(ctx, in, out)
}
