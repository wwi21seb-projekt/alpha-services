name: Create and Manage Chats
description: Testing creation and error handling for chat creation.

vars:
  baseurl: "https://alpha.c930.net/api"
  username: "testuser{{ randAlphaNum 5 }}"
  password: "Chm12345!"
  nickname: "testnickname{{ randAlpha 5 }}"
  email: "testemail{{ randAlphaNum 5 }}@gmail.com"

testcases:
  - name: Create-User-Success
    steps:
      - type: http
        method: POST
        url: "{{.baseurl}}/users"
        headers:
          Content-Type: application/json
        body: |
          {
            "username": "{{.username}}",
            "password": "{{.password}}",
            "nickname": "{{.nickname}}",
            "email": "{{.email}}",
            "profilePicture": ""
          }
        assertions:
          - result.statuscode ShouldEqual 201

  - name: Create chat success
    steps:
      - type: http
        method: POST
        url: "{{.baseurl}}/chats"
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{.jwt1}}"
        body: |
          {
            "username": "{{.username}}",
            "content": "hello from the other side"
          }
        assertions:
          - result.statuscode ShouldEqual 201

  - name: Create chat Bad Request
    steps:
      - type: http
        method: POST
        url: "{{.baseurl}}/chats"
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{.jwt1}}"
        body: |
          {
            "username": "",
            "content": "hello from the other side"
          }
        assertions:
          - result.statuscode ShouldEqual 400

  - name: Create chat Unauthorized
    steps:
      - type: http
        method: POST
        url: "{{.baseurl}}/chats"
        headers:
          Content-Type: application/json
        body: |
          {
            "username": "{{.username2}}",
            "content": "hello from the other side"
          }
        assertions:
          - result.statuscode ShouldEqual 401

  - name: Create chat User Not Found
    steps:
      - type: http
        method: POST
        url: "{{.baseurl}}/chats"
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{.jwt1}}"
        body: |
          {
            "username": "nonexistentuser",
            "content": "hello from the other side"
          }
        assertions:
          - result.statuscode ShouldEqual 404

  - name: Create chat Conflict Chat Already Exists
    steps:
      - type: http
        method: POST
        url: "{{.baseurl}}/chats"
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{.jwt1}}"
        body: |
          {
            "username": "{{.username2}}",
            "content": "hello from the other side"
          }
        assertions:
          - result.statuscode ShouldEqual 409

